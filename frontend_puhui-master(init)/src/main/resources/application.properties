# 项目发布运行的端口号
server.port=9090

# 配置应用程序发布运行的名字
server.servlet.context-path=/
# 可选项 -- 应用程序发布之后在服务器运行时显示的名字 -- 可选
# server.servlet.application-display-name=NucSpringbootVue20210618Application

# 配置json字符串转换时的时区为东8区和格式，springmvc会将control层返回结果集List，自动序列化转换为json字符串，在此过程中需要指定时区和时间格式
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8

# springboot默认加载数据源时 进行数据库连接时的jdbc的连接属性值
# 数据源使用的 druid , spring.datasource. 是druid数据源进行配置的前缀(需要和druid配置类价值是的前缀名保持一致)
# jdbc 连接属性
# MySQL5
# spring.datasource.url=jdbc:mysql://localhost:3306/nuc202105?useUnicode=true&characterEncoding=utf8
#MySQL8
spring.datasource.url=jdbc:mysql://localhost:3306/financial_lending?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
spring.datasource.username=root
spring.datasource.password=123456a?
# MySQL5
#spring.datasource.driverClassName=com.mysql.jdbc.Driver
# MySQL8
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver

# druid数据源的其他属性，具体属性值调优，参考官网说明：https://druid.apache.org/
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
spring.datasource.maxWait=60000
spring.datasource.timeBetweenEvictionRunsMillis=60000
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
spring.datasource.filters=stat,wall,log4j2
#spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

# mybatis的配置信息
# 配置springboot框架加载 mybatis mapper映射文件的路径
mybatis.mapper-locations=classpath:mapper/**/*Mapper.xml
# 配置mybaits中实体类的别名， 指定包下面的所有的类可以使用别名；
# 默认别名是类名或者是首字母小写的类名
# 主要方便与 mybatis配置时不需要写实体类 全包路径名
mybatis.type-aliases-package=com.jd.bean
# mybatis打印调试控制台打印sql语句 打印开关，不需要像 单独mybatis框架一样 配置 log4j的配置文件，只需要配置下面的语句即可
# （仅限于控制台，如果需要将日期保存到磁盘则需要配置log4j配置文件）
logging.level.com.jd.dao=DEBUG

# 配置springboot的模板引擎  默认的模板引擎使用 thymeleaf
# 前端渲染模板 Thymeleaf 【官方推荐的】
spring.thymeleaf.cache=false
# thymeleaf语法要求的模式，默认是严格语法要求，要求所有标签必须进行闭合处理；
# 指定模式为LEGACYHTML5。非严格语法要求，该值为HTML5，标签可以不用进行闭合处理；需要nekohtml第三方支持
# [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8

# 等价于springmvc模式下的前缀后缀配置，跳转时不需要写前缀和后缀
# 注意，实际的html页面与配置路径一致
# springmvc中视图解析中的前缀和后缀的配置【针对thymeleaf模板】
# 所有的前台页面都放在 /templetes中
# view层视图路径url
spring.thymeleaf.prefix=classpath:/templates/
# view层试图的后缀
spring.thymeleaf.suffix=.html

#邮件发送配置
spring.mail.host=smtp.163.com
spring.mail.username=jditpc@163.com
#邮件发送密钥
spring.mail.password=KMDYLKJVYUAUYQOM
spring.mail.properties.mail.smtp.ssl.enable=true

#多文件上传
#是否支持多文件上传
spring.servlet.multipart.enabled=true
#上传文件最大值
spring.servlet.multipart.max-file-size=10MB
#请求最大值
spring.servlet.multipart.max-request-size=10MB
#文件写入磁盘的阈值
spring.servlet.multipart.file-size-threshold=0B
#上传文件的保存地址
spring.servlet.multipart.location=D:/qst/uploadPath/upload
# 是否在文件或参数访问时延迟解析多部分请求
spring.servlet.multipart.resolve-lazily=false




#springboot默认进行了静态资源解析，静态资源放置的路径是 static 目录，也就是静态资源文件放在static目录，springboot会自动进行静态资源解析处理
#  静态资源解析：
#            产生的原因：是因为 dispatcherservlet的映射路径是 / ,这样就造成了，
#            所有的在项目发布目录之后的访问路径都会被dispatcherservlet进行转发处理；
#            但是，一些使用的第三方发的静态资源文件并不需要进行转发请求，只是获取文件而不是request请求；
#
#            这样就需要对静态资源进行解释说明，告诉springmvc不要将访问文件的url作为request请求处理；
#            ssm的处理方式：
#            spring3.0之后提供了mvc:resources的静态资源解析处理；
#            mapping表示静态资源访问路径的前缀； 要求静态资源 放在 webapp的 static目录下，进行统一处理；
#            location：表示静态资源在发布的项目目录中的访问位置；
#            springboot框架默认进行处理；
#
#            注意：弊端：在Controller中不能在使用 static作为request响应方法的 请求 路径；

